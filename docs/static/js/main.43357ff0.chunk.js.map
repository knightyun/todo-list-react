{"version":3,"sources":["todo-list-module/Header.js","todo-list-module/Main.js","todo-list-module/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","state","todo","handleSubmit","bind","handleChange","evt","preventDefault","this","setState","pre","trim","length","onAddTodo","target","value","onSubmit","className","type","onChange","placeholder","React","Component","Main","doingLists","todoLists","onDelItem","onExchangeList","onRenameTodo","doneLists","DoingTodo","lists","listType","DoneTodo","TodoList","elLists","Array","prototype","map","call","item","idx","key","TodoListItem","isInput","inputRef","createRef","dataTransfer","setData","console","log","draggable","onDragStart","handleDragStart","onDrop","handleDrop","onClick","checked","ref","onBlur","current","focus","Footer","href","onCLearTodo","App","localStorage","JSON","parse","handleAddTodo","handleDelItem","handleExchangeList","handleRenameTodo","handleClearTodo","concat","reverse","_doneLists","slice","splice","_todoLists","newTodo","setItem","stringify","Fragment","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","body","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.43357ff0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            todo: ''\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    // 新增 todo\r\n    handleSubmit(evt) {\r\n        evt.preventDefault();\r\n        \r\n        // 处理空白字符\r\n        this.setState(pre => ({\r\n            todo: pre.todo.trim()\r\n        }), () => {\r\n            // 非空则提交\r\n            if (this.state.todo.length > 0) {\r\n    \r\n                // 调用父组件方法\r\n                this.props.onAddTodo(this.state.todo);\r\n    \r\n                // 清空输入\r\n                this.setState({\r\n                    todo: ''\r\n                })\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    handleChange(evt) {\r\n        this.setState({\r\n            todo: evt.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <form onSubmit={ this.handleSubmit }>\r\n                    <label className=\"header-label\">ToDoList</label>\r\n                    <input className=\"header-input\" type=\"text\"\r\n                        onChange={ this.handleChange }\r\n                        value={ this.state.todo }\r\n                        placeholder=\"添加 ToDo\" />\r\n                </form>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass Main extends React.Component {\r\n    render() {\r\n        return (\r\n            <main>\r\n                <DoingTodo doingLists={ this.props.todoLists }\r\n                    onDelItem={ this.props.onDelItem }\r\n                    onExchangeList={ this.props.onExchangeList }\r\n                    onRenameTodo={ this.props.onRenameTodo } />\r\n                <DoneTodo doneLists={ this.props.doneLists }\r\n                    onDelItem={ this.props.onDelItem }\r\n                    onExchangeList={ this.props.onExchangeList }\r\n                    onRenameTodo={ this.props.onRenameTodo } />\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\n// 正在进行\r\nclass DoingTodo extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"doing\">\r\n                <div className=\"doing-head\">\r\n                    <div className=\"head-text\">正在进行</div>\r\n                    <div className=\"head-num\">\r\n                        { this.props.doingLists.length }\r\n                    </div>\r\n                </div>\r\n\r\n                <TodoList lists={ this.props.doingLists }\r\n                    className=\"doing-list\"\r\n                    listType=\"todoList\"\r\n                    onDelItem={ this.props.onDelItem }\r\n                    onExchangeList={ this.props.onExchangeList }\r\n                    onRenameTodo={ this.props.onRenameTodo } />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// 已经完成\r\nclass DoneTodo extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"done\">\r\n                <div className=\"done-head\">\r\n                    <div className=\"head-text\">正在进行</div>\r\n                    <div className=\"head-num\">\r\n                        { this.props.doneLists.length }\r\n                    </div>\r\n                </div>\r\n\r\n                <TodoList lists={ this.props.doneLists }\r\n                    className=\"done-list\"\r\n                    listType=\"doneList\"\r\n                    onDelItem={ this.props.onDelItem }\r\n                    onExchangeList={ this.props.onExchangeList }\r\n                    onRenameTodo={ this.props.onRenameTodo } />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// 复用的列表组件\r\nclass TodoList extends React.Component {\r\n    render() {\r\n        // 获取列表项目内容\r\n        var lists = this.props.lists || [];\r\n\r\n        var elLists = Array.prototype.map.call(\r\n            lists,\r\n            (item, idx) => (\r\n            <TodoListItem item={ item } key={ idx }\r\n                listType={ this.props.listType } idx={ idx }\r\n                onDelItem={ this.props.onDelItem }\r\n                onExchangeList={ this.props.onExchangeList }\r\n                onRenameTodo={ this.props.onRenameTodo } />\r\n            )\r\n        );\r\n\r\n        return (\r\n            <ul className={ this.props.className }>\r\n                { elLists }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\n// 复用的列表单项组件\r\nclass TodoListItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isInput: false\r\n        }\r\n        this.inputRef = React.createRef();\r\n    }\r\n\r\n    handleDragStart(evt) {\r\n        evt.dataTransfer.setData('text/plain', 'hello')\r\n    }\r\n\r\n    handleDrop(evt) {\r\n        console.log()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <li className=\"todo-list-item\" draggable=\"true\"\r\n                onDragStart={ () => this.handleDragStart() }\r\n                onDrop={ () => this.handleDrop() }\r\n            >\r\n                \r\n                {/* 标记完成或待做 */}\r\n                {\r\n                this.props.listType === 'todoList' ?\r\n                    <input type=\"checkbox\" className=\"item-check\"\r\n                        onClick={ (evt) => this.props.onExchangeList(this.props.idx,\r\n                        this.props.listType, evt) } /> :\r\n                    <input type=\"checkbox\" className=\"item-check\"\r\n                        onChange={ (evt) => this.props.onExchangeList(this.props.idx,\r\n                        this.props.listType, evt) } checked />\r\n                }\r\n\r\n                {/* 内容编辑状态切换 */}\r\n                {\r\n                this.state.isInput ?\r\n                    <input className=\"item-content-input\"\r\n                        value={ this.props.item } ref={ this.inputRef }\r\n                        onChange={ evt => this.props.onRenameTodo(\r\n                            this.props.idx, this.props.listType, evt\r\n                        )}\r\n                        onBlur={ () => this.setState({\r\n                            isInput: !this.state.isInput\r\n                        })} /> :\r\n                    <p className=\"item-content-p\"\r\n                        onClick={ () => {\r\n                            this.setState({\r\n                                isInput: !this.state.isInput\r\n                            }, () => {\r\n                                this.inputRef.current.focus();\r\n                            });\r\n                        }}\r\n                    >{ this.props.item }</p>\r\n                }\r\n                \r\n                {/* 删除项目 */}\r\n                <span className=\"item-delete\"\r\n                    onClick={ () => this.props.onDelItem(this.props.idx, \r\n                    this.props.listType) }\r\n                >X</span>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <span>\r\n                    Copyright &copy; 2020\r\n                    <a className=\"author\" href=\"https://github.com/knightyun\">\r\n                        knightyun.\r\n                    </a>\r\n                </span>\r\n                <span className=\"clear-todo\"\r\n                    onClick={ this.props.onCLearTodo }\r\n                >clear</span>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport Header from './todo-list-module/Header';\nimport Main from './todo-list-module/Main';\nimport Footer from './todo-list-module/Footer';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // 获取本地存储数据\n        var todo = {\n            todoLists: [], // 待做项\n            doneLists: []  // 完成项\n        }\n        this.state = localStorage.todo ?\n                     JSON.parse(localStorage.todo) : todo;\n\n        this.handleAddTodo      = this.handleAddTodo.bind(this);\n        this.handleDelItem      = this.handleDelItem.bind(this);\n        this.handleExchangeList = this.handleExchangeList.bind(this);\n        this.handleRenameTodo   = this.handleRenameTodo.bind(this);\n        this.handleClearTodo    = this.handleClearTodo.bind(this);\n    }\n    \n    /**\n     * 新增 todo 项（正在进行）\n     *\n     * @param {string} item - todo 项目\n     * @memberof App\n     */\n    handleAddTodo(item) {\n        this.setState(pre => ({\n            todoLists: Array.prototype.concat.call(\n                pre.todoLists, item\n            ).reverse()\n        }), () => {\n            // 由于 setState 是异步的，同步任务中不能马上得到当前改变值，\n            // 设置在回调函数中执行\n            // console.log('todoLists:', this.state.todoLists);\n        });\n    }\n\n    /**\n     * 删除 todo 单项（包括待做和已完成项）\n     * \n     * @param {number} idx  - 要删除的项目索引\n     * @param {string} type - 在指定列表中删除\n     * @memberof App\n     */\n    handleDelItem(idx, type) {\n        if (type === 'todoList') {\n            this.setState(pre => {\n                var _todoLists = pre.todoLists.slice();\n                \n                Array.prototype.splice.call(_todoLists, idx, 1);\n    \n                return { todoLists: _todoLists }\n            });\n            return;\n        }\n\n        if (type === 'doneList') {\n            this.setState(pre => {\n                var _doneLists = pre.doneLists.slice();\n                \n                Array.prototype.splice.call(_doneLists, idx, 1);\n    \n                return { doneLists: _doneLists }\n            });\n            return;\n        }\n    }\n\n    /**\n     * 切换项目待做或已完成状态\n     *\n     * @param {number} idx  - 要删除的项目索引\n     * @param {string} type - 在指定列表中删除\n     * @param {Event}  evt  - 事件对象\n     * @memberof App\n     */\n    handleExchangeList(idx, type, evt) {\n        evt.preventDefault();\n\n        // 待做切换完成\n        if (type === 'todoList') {\n            this.setState(pre => ({\n                doneLists: Array.prototype.concat.call(\n                    pre.todoLists[idx],\n                    pre.doneLists,\n                )\n            }));\n            this.handleDelItem(idx, type);\n        }\n\n        // 完成切换待做\n        if (type === 'doneList') {\n            this.setState(pre => ({\n                todoLists: Array.prototype.concat(\n                    pre.todoLists,\n                    pre.doneLists[idx]\n                )\n            }));\n            this.handleDelItem(idx, type);\n        }\n    }\n\n    /**\n     * 修改 todo 项内容（包括待做与完成项）\n     *\n     * @param {number} idx  - 要删除的项目索引\n     * @param {string} type - 在指定列表中删除\n     * @param {Event}  evt  - 事件对象\n     * @memberof App\n     */\n    handleRenameTodo(idx, type, evt) {\n        var newTodo = evt.target.value;\n\n        if (type === 'todoList') {\n            this.setState(pre => {\n                var _todoLists = pre.todoLists;\n\n                _todoLists[idx] = newTodo;\n\n                return { todoLists: _todoLists }\n            })\n        }\n        if (type === 'doneList') {\n            this.setState(pre => {\n                var _doneLists = pre.doneLists;\n\n                _doneLists[idx] = newTodo;\n\n                return { doneLists: _doneLists }\n            })\n        }\n    }\n    \n    /**\n     * 清空所有 todo 项\n     *\n     * @memberof App\n     */\n    handleClearTodo() {\n        this.setState({\n            todoLists: [],\n            doneLists: []\n        })\n    }\n\n    render() {\n        // 本地存储 todo\n        var todo = this.state;\n        localStorage.setItem(\n            'todo', JSON.stringify(todo)\n        );\n\n        return (\n            <React.Fragment>\n                <Header onAddTodo={ this.handleAddTodo } />\n\n                <Main todoLists={ this.state.todoLists }\n                    doneLists={ this.state.doneLists }\n                    onDelItem={ this.handleDelItem }\n                    onExchangeList={ this.handleExchangeList }\n                    onRenameTodo={ this.handleRenameTodo } />\n\n                <Footer onCLearTodo={ this.handleClearTodo } />\n            </React.Fragment>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.body\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}