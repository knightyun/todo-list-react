{"version":3,"sources":["components/Header.js","components/TodoContext.js","components/Main.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","state","todo","handleSubmit","bind","handleChange","evt","preventDefault","this","setState","pre","trim","length","onAddTodo","target","value","onSubmit","className","type","onChange","placeholder","React","Component","TodoContext","createContext","Main","doingLists","todoLists","doneLists","DoingTodo","lists","listType","DoneTodo","TodoList","elLists","Array","prototype","map","call","item","idx","key","onDelItem","context","handleDelItem","onExchangeList","handleExchangeList","onRenameTodo","handleRenameTodo","contextType","TodoListItem","isInput","inputRef","createRef","dataTransfer","setData","console","log","draggable","onDragStart","handleDragStart","onDrop","handleDrop","onClick","checked","ref","onBlur","current","focus","Footer","href","onCLearTodo","App","localStorage","JSON","parse","handleAddTodo","handleClearTodo","handlers","concat","reverse","_doneLists","slice","splice","_todoLists","newTodo","setItem","stringify","Provider","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","root","document","querySelector","ReactDOM","render","StrictMode","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1680e5c1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      todo: ''\r\n    }\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  // 新增 todo\r\n  handleSubmit(evt) {\r\n    evt.preventDefault();\r\n\r\n    // 处理空白字符\r\n    this.setState(pre => ({\r\n      todo: pre.todo.trim()\r\n    }), () => {\r\n      // 非空则提交\r\n      if (this.state.todo.length > 0) {\r\n        // 调用父组件方法\r\n        this.props.onAddTodo(this.state.todo);\r\n        // 清空输入\r\n        this.setState({\r\n          todo: ''\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  handleChange(evt) {\r\n    this.setState({\r\n      todo: evt.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label className=\"header-label\">ToDoList</label>\r\n          <input className=\"header-input\" type=\"text\"\r\n            onChange={this.handleChange}\r\n            value={this.state.todo}\r\n            placeholder=\"添加 ToDo\"\r\n          />\r\n        </form>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n// 创建 context，将数据传递给深层组件；\r\nexport const TodoContext = React.createContext();","import React from 'react';\r\nimport { TodoContext } from './TodoContext';\r\n\r\nclass Main extends React.Component {\r\n  render() {\r\n    return (\r\n      <main>\r\n        <DoingTodo\r\n          doingLists={this.props.todoLists}\r\n        />\r\n        <DoneTodo\r\n          doneLists={this.props.doneLists}\r\n        />\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\n// 正在进行模块\r\nclass DoingTodo extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"doing\">\r\n        <div className=\"doing-head\">\r\n          <div className=\"head-text\">正在进行</div>\r\n          <div className=\"head-num\">\r\n            {this.props.doingLists.length}\r\n          </div>\r\n        </div>\r\n        <TodoList\r\n          lists={this.props.doingLists}\r\n          className=\"doing-list\"\r\n          listType=\"todoList\"\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// 已经完成模块\r\nclass DoneTodo extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"done\">\r\n        <div className=\"done-head\">\r\n          <div className=\"head-text\">正在进行</div>\r\n          <div className=\"head-num\">\r\n            {this.props.doneLists.length}\r\n          </div>\r\n        </div>\r\n        <TodoList\r\n          lists={this.props.doneLists}\r\n          className=\"done-list\"\r\n          listType=\"doneList\"\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// 复用的列表组件\r\nclass TodoList extends React.Component {\r\n  // 声明之后，内部可以使用 this.context 访问 Provider 传入的 value\r\n  static contextType = TodoContext;\r\n  \r\n  render() {\r\n    // 获取列表项目内容\r\n    var lists = this.props.lists || [];\r\n    var elLists = Array.prototype.map.call(\r\n      lists,\r\n      (item, idx) => (\r\n        <TodoListItem\r\n          item={item} key={idx} idx={idx}\r\n          listType={this.props.listType}\r\n          onDelItem={this.context.handleDelItem}\r\n          onExchangeList={this.context.handleExchangeList}\r\n          onRenameTodo={this.context.handleRenameTodo}\r\n        />\r\n      )\r\n    );\r\n    return (\r\n      <ul className={this.props.className}>\r\n        {elLists}\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\n// TodoList.contextType = TodoContext;\r\n\r\n// 复用的列表单项组件\r\nclass TodoListItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // 处理可编辑状态\r\n      isInput: false\r\n    }\r\n    this.inputRef = React.createRef();\r\n  }\r\n\r\n  handleDragStart(evt) {\r\n    evt.dataTransfer.setData('text/plain', 'hello')\r\n  }\r\n\r\n  handleDrop(evt) {\r\n    console.log()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <li className=\"todo-list-item\" draggable=\"true\"\r\n        onDragStart={() => this.handleDragStart()}\r\n        onDrop={() => this.handleDrop()}\r\n      >\r\n        {/* 标记完成或待做 */}\r\n        {\r\n          this.props.listType === 'todoList' ?\r\n            <input type=\"checkbox\" className=\"item-check\"\r\n              onClick={(evt) =>\r\n                this.props.onExchangeList(\r\n                  this.props.idx,\r\n                  this.props.listType,\r\n                  evt\r\n                )\r\n              }\r\n            /> :\r\n            <input type=\"checkbox\" className=\"item-check\"\r\n              onChange={(evt) =>\r\n                this.props.onExchangeList(\r\n                  this.props.idx,\r\n                  this.props.listType,\r\n                  evt\r\n                )\r\n              } \r\n              checked\r\n            />\r\n        }\r\n        {/* 内容编辑状态切换 */}\r\n        {\r\n          this.state.isInput ?\r\n            <input className=\"item-content-input\"\r\n              value={this.props.item} ref={this.inputRef}\r\n              onChange={evt => this.props.onRenameTodo(\r\n                this.props.idx, this.props.listType, evt\r\n              )}\r\n              onBlur={() => this.setState({\r\n                isInput: !this.state.isInput\r\n              })}\r\n            /> :\r\n            <p className=\"item-content-p\"\r\n              onClick={() => {\r\n                this.setState({\r\n                  isInput: !this.state.isInput\r\n                }, () => {\r\n                  this.inputRef.current.focus();\r\n                });\r\n              }}\r\n            >{this.props.item}</p>\r\n        }\r\n        {/* 删除项目 */}\r\n        <span className=\"item-delete\"\r\n          onClick={() =>\r\n            this.props.onDelItem(\r\n              this.props.idx,\r\n              this.props.listType\r\n            )\r\n          }\r\n        >X</span>\r\n      </li>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nclass Footer extends React.Component {\r\n  render() {\r\n    return (\r\n      <footer>\r\n        <span>\r\n          Copyright &copy; 2020\r\n                    <a className=\"author\" href=\"https://github.com/knightyun\">\r\n            knightyun.\r\n                    </a>\r\n        </span>\r\n        <span className=\"clear-todo\"\r\n          onClick={this.props.onCLearTodo}\r\n        >clear</span>\r\n      </footer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Header from './components/Header';\r\nimport Main from './components/Main';\r\nimport Footer from './components/Footer';\r\nimport { TodoContext } from './components/TodoContext';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // 获取本地存储数据\r\n    var todo = {\r\n      todoLists: [], // 待做项\r\n      doneLists: []  // 完成项\r\n    }\r\n    this.state = localStorage.todo ?\r\n      JSON.parse(localStorage.todo) : todo;\r\n\r\n    this.handleAddTodo = this.handleAddTodo.bind(this);\r\n    this.handleDelItem = this.handleDelItem.bind(this);\r\n    this.handleExchangeList = this.handleExchangeList.bind(this);\r\n    this.handleRenameTodo = this.handleRenameTodo.bind(this);\r\n    this.handleClearTodo = this.handleClearTodo.bind(this);\r\n\r\n    this.handlers = {\r\n      handleDelItem: this.handleDelItem,\r\n      handleExchangeList: this.handleExchangeList,\r\n      handleRenameTodo: this.handleRenameTodo,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 新增 todo 项（正在进行）\r\n   *\r\n   * @param {string} item - todo 项目\r\n   * @memberof App\r\n   */\r\n  handleAddTodo(item) {\r\n    this.setState(pre => ({\r\n      todoLists: Array.prototype.concat.call(\r\n        pre.todoLists, item\r\n      ).reverse()\r\n    }), () => {\r\n      // 由于 setState 是异步的，同步任务中不能马上得到当前改变值，\r\n      // 设置在回调函数中执行\r\n      // console.log('todoLists:', this.state.todoLists);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 删除 todo 单项（包括待做和已完成项）\r\n   * \r\n   * @param {number} idx  - 要删除的项目索引\r\n   * @param {string} type - 在指定列表中删除\r\n   * @memberof App\r\n   */\r\n  handleDelItem(idx, type) {\r\n    if (type === 'todoList') {\r\n      this.setState(pre => {\r\n        var _todoLists = pre.todoLists.slice();\r\n\r\n        Array.prototype.splice.call(_todoLists, idx, 1);\r\n\r\n        return { todoLists: _todoLists }\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (type === 'doneList') {\r\n      this.setState(pre => {\r\n        var _doneLists = pre.doneLists.slice();\r\n\r\n        Array.prototype.splice.call(_doneLists, idx, 1);\r\n\r\n        return { doneLists: _doneLists }\r\n      });\r\n      return;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 切换项目待做或已完成状态\r\n   *\r\n   * @param {number} idx  - 要删除的项目索引\r\n   * @param {string} type - 在指定列表中删除\r\n   * @param {Event}  evt  - 事件对象\r\n   * @memberof App\r\n   */\r\n  handleExchangeList(idx, type, evt) {\r\n    evt.preventDefault();\r\n\r\n    // 待做切换完成\r\n    if (type === 'todoList') {\r\n      this.setState(pre => ({\r\n        doneLists: Array.prototype.concat.call(\r\n          pre.todoLists[idx],\r\n          pre.doneLists,\r\n        )\r\n      }));\r\n      this.handleDelItem(idx, type);\r\n    }\r\n\r\n    // 完成切换待做\r\n    if (type === 'doneList') {\r\n      this.setState(pre => ({\r\n        todoLists: Array.prototype.concat(\r\n          pre.todoLists,\r\n          pre.doneLists[idx]\r\n        )\r\n      }));\r\n      this.handleDelItem(idx, type);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 修改 todo 项内容（包括待做与完成项）\r\n   *\r\n   * @param {number} idx  - 要删除的项目索引\r\n   * @param {string} type - 在指定列表中删除\r\n   * @param {Event}  evt  - 事件对象\r\n   * @memberof App\r\n   */\r\n  handleRenameTodo(idx, type, evt) {\r\n    var newTodo = evt.target.value;\r\n\r\n    if (type === 'todoList') {\r\n      this.setState(pre => {\r\n        var _todoLists = pre.todoLists;\r\n\r\n        _todoLists[idx] = newTodo;\r\n\r\n        return { todoLists: _todoLists }\r\n      })\r\n    }\r\n    if (type === 'doneList') {\r\n      this.setState(pre => {\r\n        var _doneLists = pre.doneLists;\r\n\r\n        _doneLists[idx] = newTodo;\r\n\r\n        return { doneLists: _doneLists }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清空所有 todo 项\r\n   *\r\n   * @memberof App\r\n   */\r\n  handleClearTodo() {\r\n    this.setState({\r\n      todoLists: [],\r\n      doneLists: []\r\n    })\r\n  }\r\n\r\n  render() {\r\n    // 本地存储 todo\r\n    var todo = this.state;\r\n    localStorage.setItem('todo', JSON.stringify(todo));\r\n\r\n    return (\r\n      // 包裹并列的组件:\r\n      // 使用 <React.Fragment></React.Fragment>\r\n      // 或者使用 <></>\r\n      //\r\n      // 使用外部申明的 context，用于在组件顶层传入数据\r\n      <TodoContext.Provider value={this.handlers}>\r\n        <Header onAddTodo={this.handleAddTodo} />\r\n        <Main\r\n          todoLists={this.state.todoLists}\r\n          doneLists={this.state.doneLists}\r\n        />\r\n        <Footer onCLearTodo={this.handleClearTodo} />\r\n      </TodoContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nlet root = document.querySelector('#root');\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  root\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\n// serviceWorker.unregister();\r\nserviceWorker.register();"],"sourceRoot":""}