{"version":3,"sources":["components/Footer.tsx","components/Header.tsx","components/TodoContext.ts","components/Main.tsx","App.tsx","index.tsx"],"names":["Footer","className","href","onClick","this","props","onCLearTodo","React","Component","Header","state","todo","handleSubmit","bind","handleChange","evt","preventDefault","setState","pre","trim","length","onAddTodo","target","value","onSubmit","type","onChange","placeholder","createContext","DoingTodo","doingLists","lists","listType","DoneTodo","doneLists","TodoList","context","elLists","Array","prototype","map","call","item","idx","onDelItem","handleDelItem","onExchangeList","handleExchangeList","onRenameTodo","handleRenameTodo","contextType","TodoContext","TodoListItem","isInput","inputRef","createRef","dataTransfer","setData","draggable","onDragStart","handleDragStart","onDrop","handleDrop","checked","ref","onBlur","current","focus","Main","todoLists","App","handlers","localStorage","JSON","parse","handleAddTodo","handleClearTodo","concat","reverse","_todoLists","slice","splice","_doneLists","newTodo","setItem","stringify","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1b550dc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface Props {\r\n  onCLearTodo: () => void;\r\n}\r\n\r\nexport default class Footer extends React.Component<Props> {\r\n  render() {\r\n    return (\r\n      <footer>\r\n        <span>\r\n          Copyright &copy; 2020\r\n                    <a className=\"author\" href=\"https://github.com/knightyun/todo-list-react\">\r\n            knightyun.\r\n                    </a>\r\n        </span>\r\n        <span className=\"clear-todo\"\r\n          onClick={this.props.onCLearTodo}\r\n        >clear</span>\r\n      </footer>\r\n    )\r\n  }\r\n}\r\n","import React, { ChangeEvent, FormEvent } from \"react\";\r\n\r\ninterface Props {\r\n  onAddTodo: (item: string) => void;\r\n}\r\ninterface State {\r\n  todo: string;\r\n}\r\n\r\nexport default class Header extends React.Component<Props, State> {\r\n  readonly state: State = {\r\n    todo: \"\",\r\n  };\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  // 新增 todo\r\n  handleSubmit(evt: FormEvent): void {\r\n    evt.preventDefault();\r\n\r\n    this.setState(\r\n      (pre) => ({ todo: pre.todo.trim() }),\r\n      () => {\r\n        if (this.state.todo.length > 0) {\r\n          this.props.onAddTodo(this.state.todo);\r\n          this.setState({ todo: \"\" });\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  handleChange(evt: ChangeEvent<HTMLInputElement>): void {\r\n    this.setState({ todo: evt.target.value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <span className=\"header-label\">ToDoList</span>\r\n          <input\r\n            className=\"header-input\"\r\n            type=\"text\"\r\n            onChange={this.handleChange}\r\n            value={this.state.todo}\r\n            placeholder=\"添加 ToDo\"\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\n// 创建 context，将数据传递给深层组件；\r\nexport default React.createContext({});","import React, { DragEvent, RefObject } from \"react\";\r\nimport { Handlers, Item, Lists, Todo, TodoType } from \"../App\";\r\nimport TodoContext from \"./TodoContext\";\r\n\r\ninterface DoingProps {\r\n  doingLists: Lists;\r\n}\r\ninterface DoneProps {\r\n  doneLists: Lists;\r\n}\r\ninterface TodoListProps {\r\n  lists: Lists;\r\n  className: string;\r\n  listType: TodoType;\r\n}\r\ninterface TodoListItemProps {\r\n  item: Item;\r\n  key: number;\r\n  idx: number;\r\n  listType: TodoType;\r\n  onDelItem: Handlers[\"handleDelItem\"];\r\n  onExchangeList: Handlers[\"handleExchangeList\"];\r\n  onRenameTodo: Handlers[\"handleRenameTodo\"];\r\n}\r\ninterface TodoListItemState {\r\n  /** 是否可编辑 */\r\n  isInput: boolean;\r\n}\r\n\r\n/** 正在进行模块 */\r\nclass DoingTodo extends React.Component<DoingProps> {\r\n  render() {\r\n    return (\r\n      <div className=\"doing\">\r\n        <div className=\"doing-head\">\r\n          <div className=\"head-text\">正在进行1</div>\r\n          <div className=\"head-num\">{this.props.doingLists.length}</div>\r\n        </div>\r\n        <TodoList\r\n          lists={this.props.doingLists}\r\n          className=\"doing-list\"\r\n          listType=\"todoList\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** 已经完成模块 */\r\nclass DoneTodo extends React.Component<DoneProps> {\r\n  render() {\r\n    return (\r\n      <div className=\"done\">\r\n        <div className=\"done-head\">\r\n          <div className=\"head-text\">正在进行</div>\r\n          <div className=\"head-num\">{this.props.doneLists.length}</div>\r\n        </div>\r\n        <TodoList\r\n          lists={this.props.doneLists}\r\n          className=\"done-list\"\r\n          listType=\"doneList\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** 复用的列表组件 */\r\nclass TodoList extends React.Component<TodoListProps> {\r\n  // 声明之后，内部可以使用 this.context 访问 Provider 传入的 value\r\n  static contextType = TodoContext;\r\n\r\n  // declare context: React.ContextType<typeof TodoContext>;\r\n  context!: Handlers;\r\n\r\n  render() {\r\n    // 获取列表项目内容\r\n    var lists = this.props.lists || [];\r\n    var elLists = Array.prototype.map.call(lists, (item, idx) => (\r\n      <TodoListItem\r\n        item={item}\r\n        key={idx}\r\n        idx={idx}\r\n        listType={this.props.listType}\r\n        onDelItem={this.context.handleDelItem}\r\n        onExchangeList={this.context.handleExchangeList}\r\n        onRenameTodo={this.context.handleRenameTodo}\r\n      />\r\n    ));\r\n    return <ul className={this.props.className}>{elLists}</ul>;\r\n  }\r\n}\r\n\r\n/** 复用的列表单项组件 */\r\nclass TodoListItem extends React.Component<\r\n  TodoListItemProps,\r\n  TodoListItemState\r\n> {\r\n  readonly state: TodoListItemState = {\r\n    isInput: false,\r\n  };\r\n\r\n  readonly inputRef: RefObject<HTMLInputElement> = React.createRef();\r\n\r\n  handleDragStart(evt: DragEvent) {\r\n    evt.dataTransfer.setData(\"text/plain\", \"hello\");\r\n  }\r\n\r\n  handleDrop(evt: DragEvent) {\r\n    // console.log()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <li\r\n        className=\"todo-list-item\"\r\n        draggable=\"true\"\r\n        onDragStart={this.handleDragStart}\r\n        onDrop={this.handleDrop}\r\n      >\r\n        {/* 标记完成或待做 */}\r\n        {this.props.listType === \"todoList\" ? (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"item-check\"\r\n            onClick={(evt) =>\r\n              this.props.onExchangeList(\r\n                this.props.idx,\r\n                this.props.listType,\r\n                evt\r\n              )\r\n            }\r\n          />\r\n        ) : (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"item-check\"\r\n            onChange={(evt) =>\r\n              this.props.onExchangeList(\r\n                this.props.idx,\r\n                this.props.listType,\r\n                evt\r\n              )\r\n            }\r\n            checked\r\n          />\r\n        )}\r\n        {/* 内容编辑状态切换 */}\r\n        {this.state.isInput ? (\r\n          <input\r\n            className=\"item-content-input\"\r\n            value={this.props.item}\r\n            ref={this.inputRef}\r\n            onChange={(evt) =>\r\n              this.props.onRenameTodo(this.props.idx, this.props.listType, evt)\r\n            }\r\n            onBlur={() =>\r\n              this.setState({\r\n                isInput: !this.state.isInput,\r\n              })\r\n            }\r\n          />\r\n        ) : (\r\n          <p\r\n            className=\"item-content-p\"\r\n            onClick={() => {\r\n              this.setState(\r\n                {\r\n                  isInput: !this.state.isInput,\r\n                },\r\n                () => {\r\n                  this.inputRef.current?.focus();\r\n                }\r\n              );\r\n            }}\r\n          >\r\n            {this.props.item}\r\n          </p>\r\n        )}\r\n        {/* 删除项目 */}\r\n        <span\r\n          className=\"item-delete\"\r\n          onClick={() =>\r\n            this.props.onDelItem(this.props.idx, this.props.listType)\r\n          }\r\n        >\r\n          X\r\n        </span>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default class Main extends React.Component<Todo> {\r\n  render() {\r\n    return (\r\n      <main>\r\n        <DoingTodo doingLists={this.props.todoLists} />\r\n        <DoneTodo doneLists={this.props.doneLists} />\r\n      </main>\r\n    );\r\n  }\r\n}\r\n","import React, { ChangeEvent, MouseEvent } from \"react\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport TodoContext from \"./components/TodoContext\";\n\n/** class 组件 的 props 类型 */\ninterface Props {}\n\n/** todo 单项类型 */\nexport type Item = string;\n\n/** todo 列表类型 */\nexport type Lists = Item[];\n\n/** class 组件 state 的类型 */\nexport interface Todo {\n  readonly todoLists: Lists;\n  readonly doneLists: Lists;\n}\n\n/** 传递给子组件的处理函数 */\nexport interface Handlers {\n  handleDelItem: App[\"handleDelItem\"];\n  handleExchangeList: App[\"handleExchangeList\"];\n  handleRenameTodo: App[\"handleRenameTodo\"];\n}\n\n/** todo 项目类型 */\nexport type TodoType = \"todoList\" | \"doneList\";\n\n// 组件的类型参数：第一个为组件接收参数的类型，第二个为 state 的类型；\nexport default class App extends React.Component<Props, Todo> {\n  readonly state: Todo = {\n    todoLists: [], // 待做项\n    doneLists: [], // 完成项\n  };\n\n  handlers: Handlers = {\n    handleDelItem: this.handleDelItem.bind(this),\n    handleExchangeList: this.handleExchangeList.bind(this),\n    handleRenameTodo: this.handleRenameTodo.bind(this),\n  };\n\n  constructor(props: Props) {\n    super(props);\n    if (localStorage.todo) this.state = JSON.parse(localStorage.todo);\n\n    this.handleAddTodo = this.handleAddTodo.bind(this);\n    this.handleDelItem = this.handleDelItem.bind(this);\n    this.handleExchangeList = this.handleExchangeList.bind(this);\n    this.handleRenameTodo = this.handleRenameTodo.bind(this);\n    this.handleClearTodo = this.handleClearTodo.bind(this);\n  }\n\n  /**\n   * 新增 todo 项（正在进行）\n   *\n   * @param {Item} item - todo 项目\n   * @memberof App\n   */\n  handleAddTodo(item: Item): void {\n    this.setState((pre: Todo) => ({\n      todoLists: Array.prototype.concat.call(pre.todoLists, item).reverse(),\n    }));\n  }\n\n  /**\n   * 删除 todo 单项（包括待做和已完成项）\n   *\n   * @param {number} idx  - 要删除的项目索引\n   * @param {string} type - 在指定列表中删除\n   * @memberof App\n   */\n  handleDelItem(idx: number, type: TodoType): void {\n    if (type === \"todoList\") {\n      this.setState((pre) => {\n        const _todoLists: Todo[\"todoLists\"] = pre.todoLists.slice();\n\n        Array.prototype.splice.call(_todoLists, idx, 1);\n\n        return { todoLists: _todoLists };\n      });\n    } else if (type === \"doneList\") {\n      this.setState((pre) => {\n        const _doneLists: Todo[\"doneLists\"] = pre.doneLists.slice();\n\n        Array.prototype.splice.call(_doneLists, idx, 1);\n\n        return { doneLists: _doneLists };\n      });\n    }\n  }\n\n  /**\n   * 切换项目待做或已完成状态\n   *\n   * @param {number} idx                   - 要删除的项目索引\n   * @param {TodoType} type                - 在指定列表中删除\n   * @param {MouseEvent | ChangeEvent} evt - 事件对象\n   * @memberof App\n   */\n  handleExchangeList(\n    idx: number,\n    type: TodoType,\n    evt: MouseEvent<HTMLInputElement> | ChangeEvent<HTMLInputElement>\n  ): void {\n    evt.preventDefault();\n\n    // 待做切换完成\n    if (type === \"todoList\") {\n      this.setState((pre) => ({\n        doneLists: Array.prototype.concat.call(\n          pre.todoLists[idx],\n          pre.doneLists\n        ),\n      }));\n      this.handleDelItem(idx, type);\n    }\n\n    // 完成切换待做\n    if (type === \"doneList\") {\n      this.setState((pre) => ({\n        todoLists: Array.prototype.concat(pre.todoLists, pre.doneLists[idx]),\n      }));\n      this.handleDelItem(idx, type);\n    }\n  }\n\n  /**\n   * 修改 todo 项内容（包括待做与完成项）\n   *\n   * @param {number} idx      - 要删除的项目索引\n   * @param {TodoType} type   - 在指定列表中删除\n   * @param {ChangeEvent} evt - 事件对象\n   * @memberof App\n   */\n  handleRenameTodo(\n    idx: number,\n    type: TodoType,\n    evt: ChangeEvent<HTMLInputElement>\n  ): void {\n    const newTodo: TodoType = evt.target.value as TodoType;\n\n    if (type === \"todoList\") {\n      this.setState((pre) => {\n        var _todoLists = pre.todoLists;\n\n        _todoLists[idx] = newTodo;\n\n        return { todoLists: _todoLists };\n      });\n    } else if (type === \"doneList\") {\n      this.setState((pre) => {\n        var _doneLists = pre.doneLists;\n\n        _doneLists[idx] = newTodo;\n\n        return { doneLists: _doneLists };\n      });\n    }\n  }\n\n  /**\n   * 清空所有 todo 项\n   *\n   * @memberof App\n   */\n  handleClearTodo(): void {\n    this.setState({\n      todoLists: [],\n      doneLists: [],\n    });\n  }\n\n  render() {\n    // 本地存储 todo\n    const todo: Todo = this.state;\n    localStorage.setItem(\"todo\", JSON.stringify(todo));\n\n    return (\n      <TodoContext.Provider value={this.handlers}>\n        <Header onAddTodo={this.handleAddTodo} />\n        <Main\n          todoLists={this.state.todoLists}\n          doneLists={this.state.doneLists}\n        />\n        <Footer onCLearTodo={this.handleClearTodo} />\n      </TodoContext.Provider>\n    );\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}